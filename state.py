from typing import Optional, Any, Dict, List
from pydantic import BaseModel

class DataPipelineState(BaseModel):
    """
    Shared state for all agents in the Autonomous Insight Pipeline.
    Each agent will read/write relevant attributes as the graph progresses.
    """

    # --- Core Input ---
    user_query: str                             # User's natural language question
    metadata: Optional[List[Dict[str, Any]]] = None  # Metadata about uploaded CSV
    csv_path: Optional[str] = None              # Path to uploaded CSV file

    # --- Planner Agent Output ---
    plan: Optional[Dict[str, Any]] = None       # Plan generated by Planner
    plan_steps: Optional[List[str]] = None      # Steps extracted from plan

    # --- SME Agent Output ---
    sme_output: Optional[Dict[str, Any]] = None  # JSON output mapping columns, filters, aggregates

    # --- SQL Agent Output ---
    sql_query: Optional[str] = None             # SQL or pandas-query generated
    queried_data: Optional[Any] = None          # Resulting DataFrame or list of dicts

    # --- Validator Agent Output ---
    validation_status: Optional[bool] = None    # True if data validated successfully
    validation_feedback: Optional[str] = None  # Reason if invalid

    # --- Output Agent Output ---
    insights: Optional[str] = None              # Textual summary
    visuals: Optional[List[str]] = None         # Graphs or images as paths/base64 strings

    # --- System Logs ---
    logs: List[str] = []                        # Agent logs for debugging/tracing

    # -------------------------
    # Helper Methods
    # -------------------------
    def add_log(self, message: str):
        """Append a log entry for tracing agent operations."""
        self.logs.append(message)

    def to_dict(self) -> Dict[str, Any]:
        """Return full state as a dictionary."""
        return self.dict()
